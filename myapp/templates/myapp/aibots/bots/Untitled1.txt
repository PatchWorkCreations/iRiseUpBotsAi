
import uuid
import logging
from django.http import JsonResponse
from django.shortcuts import redirect
from django.utils.timezone import timedelta
from django.contrib.auth.decorators import user_passes_test
from square.client import Client
from .models import SquareCustomer, UserCourseAccess, Transaction
from myapp.utils import send_renewal_email,  send_failure_email
from django.conf import settings

logger = logging.getLogger(__name__)

# Initialize Square client
square_client = Client(
    access_token=settings.SQUARE_ACCESS_TOKEN,
    environment='production'  # Change to 'sandbox' for testing
)


@user_passes_test(lambda u: u.is_superuser or u.is_staff, login_url='/admin/login/')
def process_renewals(request):
    if request.method == "POST":
        user_ids = request.POST.getlist('user_ids')  # Get selected user IDs
        results = []  # To store the results of the renewal process

        for user_id in user_ids:
            try:
                # Fetch user and customer details
                user_course_access = UserCourseAccess.objects.get(user_id=user_id)
                square_customer = SquareCustomer.objects.get(user_id=user_id)

                # Determine renewal amount
                amount = determine_amount_based_on_plan(user_course_access.selected_plan)
                if amount <= 0:
                    results.append(f"Invalid plan or amount for {user_course_access.user.email}")
                    continue

                # Charge the stored card
                payment_result = square_client.payments.create_payment(
                    body={
                        "source_id": square_customer.card_id,
                        "idempotency_key": str(uuid.uuid4()),
                        "amount_money": {
                            "amount": amount,
                            "currency": "USD"
                        },
                        "customer_id": square_customer.customer_id,
                        "autocomplete": True
                    }
                )

                if payment_result.is_success():
                    # Update subscription expiration date
                    if user_course_access.selected_plan == '1-week':
                        user_course_access.expiration_date += timedelta(weeks=1)
                    elif user_course_access.selected_plan == '4-week':
                        user_course_access.expiration_date += timedelta(weeks=4)
                    elif user_course_access.selected_plan == '12-week':
                        user_course_access.expiration_date += timedelta(weeks=12)

                    user_course_access.save()

                    # Log successful transaction
                    Transaction.objects.create(
                        user=user_course_access.user,
                        status='success',
                        amount=amount,
                        subscription_type=user_course_access.selected_plan,
                        recurring=True,
                        next_billing_date=user_course_access.expiration_date
                    )

                    # Send renewal confirmation email
                    send_renewal_email(
                        user_email=user_course_access.user.email,
                        expiration_date=user_course_access.expiration_date,
                        selected_plan=user_course_access.selected_plan
                    )

                    results.append(f"Successfully renewed {user_course_access.user.email}")
                else:
                    # Handle payment failure
                    error_message = ", ".join([error['detail'] for error in payment_result.errors])
                    results.append(f"Failed to renew {user_course_access.user.email}: {error_message}")

                    # Send failure email to the user
                    send_failure_email(
                        user_email=user_course_access.user.email,
                        error_message=error_message
                    )

            except UserCourseAccess.DoesNotExist:
                results.append(f"UserCourseAccess not found for user ID {user_id}")
            except SquareCustomer.DoesNotExist:
                results.append(f"SquareCustomer not found for user ID {user_id}")
            except Exception as e:
                logger.error(f"Error renewing user ID {user_id}: {str(e)}", exc_info=True)
                results.append(f"Error renewing user ID {user_id}: {str(e)}")

        # Return results to the admin view
        return JsonResponse({'results': results})

    return redirect('custom_admin:renewals')